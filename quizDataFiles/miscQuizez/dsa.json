{
  "results": [
    {
      "question": "What is the time complexity of binary search?",
      "correct_answer": "O(log n)",
      "incorrect_answers": ["O(n)", "O(n^2)", "O(1)"]
    },

    {
      "question": "Which data structure uses LIFO (Last-In-First-Out) ordering?",
      "correct_answer": "Stack",
      "incorrect_answers": ["Queue", "Heap", "Tree"]
    },

    {
      "question": "What is the worst-case time complexity of bubble sort?",
      "correct_answer": "O(n^2)",
      "incorrect_answers": ["O(n)", "O(log n)", "O(1)"]
    },

    {
      "question": "Which data structure can be traversed in both depth-first and breadth-first orders?",
      "correct_answer": "Tree",
      "incorrect_answers": ["Stack", "Heap", "Queue"]
    },

    {
      "question": "What is the space complexity of quicksort?",
      "correct_answer": "O(log n)",
      "incorrect_answers": ["O(n)", "O(n^2)", "O(1)"]
    },

    {
      "question": "Which data structure provides constant-time access to its elements?",
      "correct_answer": "Array",
      "incorrect_answers": ["Linked List", "Queue", "Tree"]
    },

    {
      "question": "What is the time complexity of inserting an element at the beginning of a linked list?",
      "correct_answer": "O(1)",
      "incorrect_answers": ["O(n)", "O(log n)", "O(n^2)"]
    },

    {
      "question": "Which sorting algorithm has the best average-case time complexity?",
      "correct_answer": "Quicksort",
      "incorrect_answers": ["Bubblesort", "Insertion Sort", "Selection Sort"]
    },

    {
      "question": "Which data structure is based on the principle of First-In-First-Out (FIFO) order?",
      "correct_answer": "Queue",
      "incorrect_answers": ["Stack", "Heap", "Tree"]
    },

    {
      "question": "What is the worst-case time complexity of mergesort?",
      "correct_answer": "O(n log n)",
      "incorrect_answers": ["O(n)", "O(n^2)", "O(1)"]
    },

    {
      "question": "Which data structure represents a hierarchical relationship between elements?",
      "correct_answer": "Tree",
      "incorrect_answers": ["Stack", "Heap", "Queue"]
    },

    {
      "question": "What is the space complexity of selection sort?",
      "correct_answer": "O(1)",
      "incorrect_answers": ["O(n)", "O(n^2)", "O(log n)"]
    },

    {
      "question": "Which sorting algorithm works by repeatedly swapping adjacent elements if they are in the wrong order?",
      "correct_answer": "Bubblesort",
      "incorrect_answers": ["Quicksort", "Insertion Sort", "Selection Sort"]
    },

    {
      "question": "What is the time complexity of searching an element in a balanced binary search tree?",
      "correct_answer": "O(log n)",
      "incorrect_answers": ["O(n)", "O(n^2)", "O(1)"]
    },

    {
      "question": "Which data structure allows efficient insertion and deletion at both ends?",
      "correct_answer": "Deque",
      "incorrect_answers": ["Stack", "Queue", "Tree"]
    },

    {
      "question": "What is the worst-case time complexity of insertion sort?",
      "correct_answer": "O(n^2)",
      "incorrect_answers": ["O(n)", "O(log n)", "O(1)"]
    },

    {
      "question": "Which sorting algorithm is based on the divide-and-conquer principle?",
      "correct_answer": "Mergesort",
      "incorrect_answers": ["Quicksort", "Bubblesort", "Selection Sort"]
    },

    {
      "question": "What is the space complexity of binary search?",
      "correct_answer": "O(1)",
      "incorrect_answers": ["O(n)", "O(log n)", "O(n^2)"]
    },

    {
      "question": "Which data structure uses the concept of priority?",
      "correct_answer": "Heap",
      "incorrect_answers": ["Stack", "Queue", "Tree"]
    },

    {
      "question": "What is the average-case time complexity of quicksort?",
      "correct_answer": "O(n log n)",
      "incorrect_answers": ["O(n)", "O(n^2)", "O(1)"]
    },

    {
      "question": "Which data structure is optimized for fast insertion and deletion at the beginning?",
      "correct_answer": "Linked List",
      "incorrect_answers": ["Array", "Queue", "Tree"]
    },

    {
      "question": "What is the time complexity of deleting an element from a linked list?",
      "correct_answer": "O(n)",
      "incorrect_answers": ["O(1)", "O(log n)", "O(n^2)"]
    },

    {
      "question": "Which sorting algorithm has the best worst-case time complexity?",
      "correct_answer": "Heapsort",
      "incorrect_answers": ["Bubblesort", "Insertion Sort", "Selection Sort"]
    },

    {
      "question": "What is the space complexity of mergesort?",
      "correct_answer": "O(n)",
      "incorrect_answers": ["O(n^2)", "O(log n)", "O(1)"]
    },

    {
      "question": "Which data structure provides efficient retrieval of the minimum and maximum element?",
      "correct_answer": "Heap",
      "incorrect_answers": ["Stack", "Queue", "Tree"]
    },

    {
      "question": "What is the worst-case time complexity of linear search?",
      "correct_answer": "O(n)",
      "incorrect_answers": ["O(1)", "O(log n)", "O(n^2)"]
    },

    {
      "question": "Which sorting algorithm is not based on comparison?",
      "correct_answer": "Radix Sort",
      "incorrect_answers": ["Quicksort", "Mergesort", "Selection Sort"]
    },

    {
      "question": "What is the time complexity of adding an element at the end of an array?",
      "correct_answer": "O(1)",
      "incorrect_answers": ["O(n)", "O(log n)", "O(n^2)"]
    },

    {
      "question": "Which data structure is a collection of connected nodes?",
      "correct_answer": "Graph",
      "incorrect_answers": ["Stack", "Heap", "Queue"]
    },

    {
      "question": "What is the worst-case time complexity of heapsort?",
      "correct_answer": "O(n log n)",
      "incorrect_answers": ["O(n)", "O(n^2)", "O(1)"]
    }
  ]
}
